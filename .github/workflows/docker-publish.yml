name: Build and Push Docker Image

# Ejecutar en push a main, pull requests, y releases
on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]

# Variables de entorno globales
env:
  REGISTRY: docker.io
  IMAGE_NAME: xlokius/lectorm

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
      # Checkout del código fuente
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Configurar Docker Buildx para builds multi-plataforma
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login a DockerHub usando secrets
      - name: Log in to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      
      # Extraer metadatos para tags y labels
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Usar 'latest' para branch main/master
            type=ref,event=branch
            type=ref,event=pr
            # Para tags de versión (v1.0.0)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            # Tag latest solo para main/master
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=Lectorm
            org.opencontainers.image.description=Lector de mangas web desarrollado con Flask
            org.opencontainers.image.vendor=Lectorm Project
            org.opencontainers.image.source=https://github.com/jcarlos-x/lectorm
            org.opencontainers.image.url=https://hub.docker.com/r/xlokius/lectorm
      
      # Construir y hacer push de la imagen Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64  # Solo AMD64 para builds más rápidos
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # Test básico de la imagen (solo para PRs)
      - name: Test Docker image
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm -d -p 5000:5000 --name lectorm-test ${{ steps.meta.outputs.tags }}
          sleep 10
          curl -f http://localhost:5000/login || exit 1
          docker stop lectorm-test
      
      # Mostrar información de la imagen construida
      - name: Image digest
        run: echo "Image built successfully"

  # Job opcional para escaneo de seguridad (deshabilitado para builds más rápidos)
  # security-scan:
  #   runs-on: ubuntu-latest
  #   needs: build-and-push
  #   if: false  # Deshabilitado temporalmente
  #   continue-on-error: true
    
    # permissions:
    #   contents: read
    #   security-events: write
    #   actions: read
    
    # steps:
    #   - name: Checkout repository
    #     uses: actions/checkout@v4
        
    #   - name: Run Trivy vulnerability scanner
    #     uses: aquasecurity/trivy-action@master
    #     with:
    #       image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
    #       format: 'table'
    #       output: 'trivy-results.txt'
      
    #   - name: Upload scan results as artifact
    #     uses: actions/upload-artifact@v4
    #     if: always()
    #     with:
    #       name: trivy-scan-results
    #       path: trivy-results.txt
    #       retention-days: 30